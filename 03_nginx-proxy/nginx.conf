user nginx;
worker_processes auto; ## Default: 1 per 1 vCPU

pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 4096; ## Default: 1024 per 1 vCPU
}

http {

    log_format main escape=none 'time = |$time_local| http_x_forwarded_for = |$http_x_forwarded_for| remote_addr = |$remote_addr| remote_user = |$remote_user| '
    'status = |$status| request_time = |$request_time| '
    'http_host = |$http_host| '
    'request = |$request| '
    'body_bytes_sent = |$body_bytes_sent| '
    'request_body = |$request_body| '
    'http_referer = |$http_referer| '
    'http_user_agent = |$http_user_agent|\n';

    access_log /dev/stdout main;

    client_max_body_size 0;
    chunked_transfer_encoding on;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_read_timeout 900s;
    proxy_buffering off;
    proxy_request_buffering off;

    map $http_upgrade $connection_upgrade {
        default Upgrade;
        '' close;
    }

    # docker_registry
    upstream docker_registry {
        server 192.168.100.2:10080;
    }
    server {
        listen 80;
        server_name registry.my.local;

        location / {
            return 301 https://registry.my.local$request_uri;
        }
    }
    server {
        server_name registry.my.local;
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/my.local.crt;
        ssl_certificate_key /etc/nginx/ssl/my.local.key;

        location / {
            proxy_pass http://docker_registry;
        }

    }
    # end docker_registry
}
